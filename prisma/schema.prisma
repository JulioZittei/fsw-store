// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String
  imageUrl String
  products Product[]
}

model Product {
  id                 String      @id @default(uuid())
  name               String
  slug               String
  description        String
  price              Decimal     @db.Decimal(8, 2)
  imageUrls          String[]
  categoryId         String
  category           Category    @relation(fields: [categoryId], references: [id])
  discountPercentage Int         @default(0)
  OrderItem          OrderItem[]
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model Order {
  id         String      @id @unique @default(uuid())
  checkoutId String?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  status     OrderStatus @default(WAITING_FOR_PAYMENT)
}

model OrderItem {
  id                 String  @id @default(uuid())
  productId          String
  product            Product @relation(fields: [productId], references: [id])
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price              Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  quantity           Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String  @unique
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Order         Order[]
}
